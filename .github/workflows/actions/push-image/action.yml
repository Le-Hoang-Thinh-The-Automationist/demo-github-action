name: Push the Docker Image to the Container Registry
description: "Push the Docker Image to the Container Registry"
inputs:
    # REQUIRED INPUTS
    image-name:
        description: "Image's name"
        required: true
    image-tag:
        description: "Image's tag"
        required: true
    registry-url:
        description: "Registry URL"
        default: ""

    # OPTIONS PARAMETERS
    image-zip-artifact:
        description: "Image"
        default: ""

    # AWS'S ECR RELATED CONFIGURATION INPUT 
    ecr-usage:
        description: "The name of the Image Regitsry"
        default: "false"
    
    role-to-assume:
        description: "Role to assume for the OIDC to AWS"

    aws-region:
        description: "The default region"

outputs:
    full_docker_image:
        description: "Full Docker Image name"
        value: ${{ steps.image_retag.full_docker_image }}

runs:
    using: 'composite' 
    steps:
        # If the docker image is delivered as artifact from another workflow Job
        # then it should be download and unzip to be pushed to the container registry 
      - name: Download Docker Image zip artifact
        if: ${{ inputs.image-zip-artifact != '' }} 
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.image-zip-artifact }}
          path: artifact/
      
      - name: Unzip the Docker zip artifact to docker image
        if: ${{ inputs.image-zip-artifact != '' }} 
        run: "docker load -i artifact/${{ inputs.image-zip-artifact }}.tar"
        shell: 'bash'

        # If the image has specific registry url behind, then it should be retaged
      - name: Retagged the docker image to the match the docker registry url
        if: ${{ inputs.registry-url != '' }} 
        id: image_retag
        run: |
            docker tag ${{ inputs.image-name }}:${{ inputs.image-tag }} \
                       ${{ inputs.registry-url }}/${{ inputs.image-name }}:${{ inputs.image-tag }} 
            echo "full_docker_image=$(echo ${{ inputs.registry-url }}/${{ inputs.image-name }}:${{ inputs.image-tag }})" >> $GITHUB_OUTPUT
        shell: 'bash'
    
      - name: Configure AWS Credentials via OIDC
        if: ${{ inputs.ecr-usage == 'true' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume:   ${{ inputs.role-to-assume }}
          aws-region:       ${{ inputs.aws-region }}

      - name: Login to Amazon ECR
        if: ${{ inputs.ecr-usage == 'true' }}
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push Image to the registry ${{ inputs.registry-url }}/${{ inputs.image-name }}
        run: |
          docker push ${{ inputs.registry-url }}/${{ inputs.image-name }}:${{ inputs.image-tag }}
        shell: 'bash'