name: CI for feature branch

on:
  # Manually triggered
  workflow_dispatch:
  
  # Event triggered by push
  push:
    branches: 
      - "feature/**"
  
  # Event triggered by pull request
  pull_request:
    branches:
      - "feature/**"



jobs:
  unit-test-and-lint:
    name: Unit Test & Lint
    runs-on: ubuntu-22.04
    
    steps:

      #  Checkout stage according to '1.3.1. CI/CD Pipeline design'
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      # Cache the Maven package for the 'build' job
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          # hashFiles('**/pom.xml') will only change if the content of the pom.xml changes
          # If not change, then the build stage will continue to use the previous cache
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

      #  'Test & Lint' stage according to '1.3.1. CI/CD Pipeline design'
      - name: Run test and lint
        run: mvn verify
        
  # This stage helps check the environment status other stage
  # This stage should run parallely and only needed for the 'integration-test' stage
  ci-status:
    name: Check CI status for further usage
    runs-on: ubuntu-22.04

    outputs:
      currently_has_pr: ${{ steps.pr_check.outputs.result }}
      repository_name: ${{ steps.get_repo_name.outputs.repository_name }}

    steps:
      - name: Set branch name
        id: branch_name
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
      
      # This is used for the later 
      - name: Check for open pull request on this branch
        id: pr_check
        uses: actions/github-script@v6
        with:
          script: |
            const branch = context.payload.pull_request 
              ? context.payload.pull_request.head.ref 
              : process.env.GITHUB_REF.replace('refs/heads/', '');
  
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${branch}`,
              state: 'open'
            });
  
            console.log(`Found ${pulls.length} open pull request(s) for branch '${branch}'`);
            // Return "true" if there's at least one open PR for the branch.
            return pulls.length > 0;
          result-encoding: string

      - name: Set the repository name
        id: get_repo_name 
        run: echo "repository_name=$(echo ${{ github.repository }} | cut -d'/' -f2)" >> $GITHUB_OUTPUT
      
  build:
    name: Build Stage
    runs-on: ubuntu-22.04
    # Only run the 'build' job after the stage 'unit-test-and-lint' passed
    needs:
      - ci-status
      - unit-test-and-lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      # Reuse Maven Cache from the test and lint stage above to save time
      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

      - name: Build Docker Image
        run: |
          docker build -t ${{ github.repository }}:feature-${{ github.sha }} .
      
      # Save Docker to a zipfile and upload the Artifact for the integration testing stage 
      # Only run the steps below if the current Workflow is triggered by PR
      - if: ${{ needs.ci-status.outputs.currently_has_pr == 'true' }}
        name: Save Docker Image to Tarball
        run: |
          docker save ${{ github.repository }}:feature-${{ github.sha }} -o ${{ needs.ci-status.outputs.repository_name }}.tar
      
      - if: ${{ needs.ci-status.outputs.currently_has_pr == 'true' }}
        name: Upload ${{ needs.ci-status.outputs.repository_name }}.tar for the integration test phase
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.ci-status.outputs.repository_name }}-gz-file
          path: ${{ needs.ci-status.outputs.repository_name }}.tar
          retention-days: 7

  # Only run the 'integration-test' if the current Workflow is triggered by PR
  integration-test:
    if: ${{ needs.ci-status.outputs.currently_has_pr == 'true' }}
    name: Run Integration Test
    runs-on: ubuntu-22.04
    needs:
      - ci-status
      - build

    environment: feature
    env:
      # Secret environments in the GitHub Workflow
      POSTGRES_DB:                             ${{ secrets.POSTGRES_DB }}
      POSTGRES_USER:                           ${{ secrets.POSTGRES_USER }}  
      POSTGRES_PASSWORD:                       ${{ secrets.POSTGRES_PASSWORD }}

      # Default environment variables needed for the Application
      POSTGRES_IP:                             ${{ vars.POSTGRES_IP }}
      POSTGRES_PORT:                           ${{ vars.POSTGRES_PORT }}
      
      # Application related environment
      APPLICATION_IMAGE:                       ${{ github.repository }}:feature-${{ github.sha }}
      SUBNET:                                  ${{ vars.SUBNET}}
      CONTAINER_IP:                            ${{ vars.CONTAINER_IP}}
      CONTAINER_PORT:                          ${{ vars.CONTAINER_PORT}}
      JAVA_APPLICATION_WAIT_TIMEOUT_IN_SECOND: 60

    steps:
      - name: Download build outputs
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.ci-status.outputs.repository_name }}-gz-file
          path: artifact/

      - name: Unbox Docker images
        run: "docker load -i artifact/${{ needs.ci-status.outputs.repository_name }}.tar"

      - name: Fetch the integration test script from the repository
        uses: actions/checkout@v2
        with:
          sparse-checkout: |
            docker-compose.yml
            integration-test
          sparse-checkout-cone-mode: false

      - name: Run the docker compose for integration testing
        run: | 
          docker compose up -d

      # JVM would require a startup time before fully run
      - name: Wait for container to be healthy
        run: |
          echo "Waiting for app_service to report healthy‚Ä¶ by waiting for ${{ env.JAVA_APPLICATION_WAIT_TIMEOUT_IN_SECOND }}s"
          # give it up to ${{ env.JAVA_APPLICATION_WAIT_TIMEOUT_IN_SECOND }}s (adjust as needed)
          timeout ${{ env.JAVA_APPLICATION_WAIT_TIMEOUT_IN_SECOND }}s bash -c '
            until docker ps \
              --filter "name=app_service" \
              --filter "health=healthy" \
              --format "{{.Names}}" | grep -q app_service; do
              echo "üïê still waiting‚Ä¶"
              sleep 2
            done
          '

      - name: Basic Request testing for the response
        run: |
          bash ./integration-test/test-db-connection.bash
          bash ./integration-test/test-pod-id.bash

  report-failure:
    if: failure()
    needs: [unit-test-and-lint, build, integration-test]
    name: Report CI Build failure 
    runs-on: ubuntu-22.04

    environment: personal

    steps:
      - name: Print CI build failed
        run: echo "CI build failed"

      - name: Send failure email
        uses: dawidd6/action-send-mail@v2
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "üö® CI Build Failed: ${{ github.repository }}"
          body: |
            The CI build for ${{ github.repository }} failed.
            Workflow: ${{ github.workflow }}
            Job: ${{ github.job }}
            Status: ${{ job.status }}
          to: ${{ secrets.EMAIL_USERNAME }}
          from: CI Notifier