name: CI for feature branch

on:
  push:
    branches: 
      - "feature/**"
  
  pull_request:
    branches:
      - "feature/**"

jobs:
  unit-test-and-lint:
    name: Unit Test & Lint
    runs-on: ubuntu-22.04
    
    environment: feature
    env:
      # The IP address is local for docker container
      POSTGRES_IP_ADDRESS:  "172.25.1.3"
      POSTGRES_DB:          ${{ secrets.feature.POSTGRES_DB }}
      POSTGRES_USER:        ${{ secrets.feature.POSTGRES_USER }}  
      POSTGRES_PASSWORD:    ${{ secrets.feature.POSTGRES_PASSWORD }}
    # 
    
    steps:

      #  Checkout stage according to '1.3.1. CI/CD Pipeline design'
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      # Cache the Maven package for the 'build' job
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          # hashFiles('**/pom.xml') will only change if the content of the pom.xml changes
          # If not change, then the build stage will continue to use the previous cache
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
  
      - name: Setup Docker container at PosrgreSQL for local testing
        run: | 
          docker network create --subnet=172.25.1.0/24 test_static_network
          docker run --name test-postgres-db \
            --network test_static_network \
            --ip=172.25.1.3 \
            -e POSTGRES_DB=${{ env.POSTGRES_DB }} \
            -e POSTGRES_USER=${{ env.POSTGRES_USER }} \
            -e POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }} \
            -d postgres:16

      #  'Test & Lint' stage according to '1.3.1. CI/CD Pipeline design'
      - name: Run test and lint
        run: mvn verify

      # Save Docker to a zipfile and upload the Artifact for the integration testing stage 
      # Only run the steps below if the current Workflow is triggered by PR
      - if: ${{ github.event_name == 'pull_request' }}
        name: Save Docker Image for the PostgreSQL for the 'integration-test' stage
        run: |
          docker save postgres:16 | gzip > postgres-16.tar.gz
      
      - if: ${{ github.event_name == 'pull_request' }}
        name: Upload ${{ github.repository }}.tar.gz for the integration test phase
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.repository }}-gz-file
          path: ${{ github.repository }}.tar.gz
          retention-days: 7

  build:
    name: Build Stage
    runs-on: ubuntu-22.04
    # Only run the 'build' job after the stage 'unit-test-and-lint' passed
    needs: "unit-test-and-lint"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      # Reuse Maven Cache from the test and lint stage above to save time
      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

      - name: Build Docker Image
        run: |
          docker build -t ${{ github.repository }}:feature-${{ github.sha }} .
      
      # Save Docker to a zipfile and upload the Artifact for the integration testing stage 
      # Only run the steps below if the current Workflow is triggered by PR
      - if: ${{ github.event_name == 'pull_request' }}
        name: Save Docker Image to Tarball
        run: |
          docker save ${{ github.repository }}:feature-${{ github.sha }} | gzip > ${{ github.repository }}.tar.gz
      
      - if: ${{ github.event_name == 'pull_request' }}
        name: Upload ${{ github.repository }}.tar.gz for the integration test phase
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.repository }}-gz-file
          path: ${{ github.repository }}.tar.gz
          retention-days: 7


  # Only run the 'integration-test' if the current Workflow is triggered by PR
  integration-test:
    if: ${{ github.event_name == 'pull_request' }}
    name: Run Integration Test
    runs-on: ubuntu-22.04
    needs: "build"
    
    steps:
      - name: Download build outputs
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.repository }}-gz-file     # must match the upload ‘name’
          path: artifact/
