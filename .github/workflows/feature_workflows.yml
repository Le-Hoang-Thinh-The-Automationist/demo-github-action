name: CI for feature branch

on:
  # Manually triggered
  workflow_dispatch:
  
  # Event triggered by push
  push:
    branches: 
      - "feature/**"
  
  # Event triggered by pull request
  pull_request:
    branches:
      - "feature/**"

env:
  ENVIRONMENT:        feature
  IMAGE_TAG:          feature-${{ github.sha }}
  IMAGE_NAME:         demo-github-action
  HELM_CHART:         deploy

permissions:
  id-token: write       # Required for OIDC
  contents: read        # Required for actions/checkout

jobs:
  unit-test-and-lint:
    name: Unit Test & Lint
    runs-on: ubuntu-22.04
    
    steps:

      #  Checkout stage according to '1.3.1. CI/CD Pipeline design'
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      # Cache the Maven package for the 'build' job
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          # hashFiles('**/pom.xml') will only change if the content of the pom.xml changes
          # If not change, then the build stage will continue to use the previous cache
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

      #  'Test & Lint' stage according to '1.3.1. CI/CD Pipeline design'
      - name: Run test and lint
        run: mvn verify
        
  # This stage helps check the environment status other stage
  # This stage should run parallely and only needed for the 'integration-test' stage
  ci-status:
    name: Check CI status for further usage
    runs-on: ubuntu-22.04

    outputs:
      currently_has_pr: ${{ steps.pr_check.outputs.result }}
      repository_name: ${{ steps.get_repo_name.outputs.repository_name }}

    steps:
      - name: Set branch name
        id: branch_name
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
      
      # This is used for the later 
      - name: Check for open pull request on this branch
        id: pr_check
        uses: actions/github-script@v6
        with:
          script: |
            const branch = context.payload.pull_request 
              ? context.payload.pull_request.head.ref 
              : process.env.GITHUB_REF.replace('refs/heads/', '');
  
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${branch}`,
              state: 'open'
            });
  
            console.log(`Found ${pulls.length} open pull request(s) for branch '${branch}'`);
            // Return "true" if there's at least one open PR for the branch.
            return pulls.length > 0;
          result-encoding: string

      - name: Set the repository name
        id: get_repo_name 
        run: echo "repository_name=$(echo ${{ github.repository }} | cut -d'/' -f2)" >> $GITHUB_OUTPUT
      
  build:
    name: Build Stage
    runs-on: ubuntu-22.04
    # Only run the 'build' job after the stage 'unit-test-and-lint' passed
    needs:
      - ci-status
      - unit-test-and-lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      # Reuse Maven Cache from the test and lint stage above to save time
      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

      - name: Build Docker Image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG}} .
      
      # Save Docker to a zipfile and upload the Artifact for the integration testing stage 
      # Only run the steps below if the current Workflow is triggered by PR
      - name: Save Docker Image to Tarball
        # if: ${{ needs.ci-status.outputs.currently_has_pr == 'true' }}
        run: |
          docker save ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG}} -o ${{ env.IMAGE_NAME }}_${{ env.IMAGE_TAG}}-gz-file.tar
      
      - name: Upload ${{ env.IMAGE_NAME }}_${{ env.IMAGE_TAG}}.tar for the integration test phase
        # if: ${{ needs.ci-status.outputs.currently_has_pr == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}_${{ env.IMAGE_TAG}}-gz-file
          path: ${{ env.IMAGE_NAME }}_${{ env.IMAGE_TAG}}-gz-file.tar
          retention-days: 7

  # # Only run the 'integration-test' if the current Workflow is triggered by PR
  # integration-test:
  #   if: ${{ needs.ci-status.outputs.currently_has_pr == 'true' }}
  #   name: Run Integration Test
  #   runs-on: ubuntu-22.04
  #   needs:
  #     - ci-status
  #     - build

  #   environment: feature
  #   env:
  #     # Secret environments in the GitHub Workflow
  #     POSTGRES_DB:                             ${{ secrets.POSTGRES_DB }}
  #     POSTGRES_USER:                           ${{ secrets.POSTGRES_USER }}  
  #     POSTGRES_PASSWORD:                       ${{ secrets.POSTGRES_PASSWORD }}

  #     # Default environment variables needed for the Application
  #     POSTGRES_IP:                             ${{ vars.POSTGRES_IP }}
  #     POSTGRES_PORT:                           ${{ vars.POSTGRES_PORT }}
      
  #     # Application related environment
  #     APPLICATION_IMAGE:                       ${{ github.repository }}:feature-${{ github.sha }}
  #     SUBNET:                                  ${{ vars.SUBNET}}
  #     CONTAINER_IP:                            ${{ vars.CONTAINER_IP}}
  #     CONTAINER_PORT:                          ${{ vars.CONTAINER_PORT}}
  #     JAVA_APPLICATION_WAIT_TIMEOUT_IN_SECOND: 60

  #   steps:

  deploy:
    needs: 
      - ci-status
      - unit-test-and-lint
      - build
      # - integration-test
    name: Deployed to the feature environment
    runs-on: ubuntu-22.04

    environment: feature

    steps:
      - name: Clone only Custom GitHub Actions
        uses: actions/checkout@v4
        with:
          sparse-checkout: .github/workflows/actions
          sparse-checkout-cone-mode: false

      - name: Push Image to the ECR
        uses: ./.github/workflows/actions/push-image
        id: push-image-to-ecr
        with:    
          image-zip-artifact: ${{ env.IMAGE_NAME }}_${{ env.IMAGE_TAG}}-gz-file

          # Image's info
          image-name:         ${{ env.IMAGE_NAME }}
          image-tag:          ${{ env.IMAGE_TAG}}
          registry-url:       ${{ vars.IMAGE_REGISTRY_URL }}

          # ECR's info
          ecr-usage:          'true'
          role-to-assume:     ${{ vars.AWS_GITHUB_ACTION_ROLE }}    
          aws-region:         ${{ vars.AWS_ECR_REGION }}

      - name: Deploy using Helm Chart
        uses: ./.github/workflows/actions/helm-deployment
        with:
          # Kubeconfig for kubectl access to K8s API server
          ca_cert:              ${{ secrets.KUBE_CA_CERT }}
          client_key:           ${{ secrets.KUBE_CLIENT_KEY }}  
          client_cert:          ${{ secrets.KUBE_CLIENT_CERT }}    
          kube_server_api_ip:   ${{ secrets.KUBE_SERVER_API_ADDRESS }}
          kube_server_api_port: ${{ secrets.KUBE_SERVER_API_PORT }}
           
          # Helm's Config data for deploy Helm Chart
          helm_input_image_repository:  ${{ steps.push-image-to-ecr.outputs.image_repository }}
          helm_input_image_tag:         ${{ env.IMAGE_TAG }}
          helm_chart:                   ${{ env.HELM_CHART }}
          helm_namespace:               ${{ env.ENVIRONMENT }}
          
  report-failure:
    if: failure()
    needs: 
      - unit-test-and-lint
      - build
      # - integration-test
      - deploy
    name: Report CI Build failure 
    runs-on: ubuntu-22.04

    environment: personal

    steps:
      - name: Clone only Custom GitHub Actions
        uses: actions/checkout@v4
        with:
          sparse-checkout: .github/workflows/actions
          sparse-checkout-cone-mode: false

      - name: Report Failure
        uses: ./.github/workflows/actions/send-email
        with:
          repository:     ${{ github.repository }}
          job:            ${{ github.job }}
          status:         ${{ job.status }}
          workflow:       ${{ github.workflow }}
          email_username: ${{ secrets.EMAIL_USERNAME }}
          email_password: ${{ secrets.EMAIL_PASSWORD }}
          notify_to:      markandadrien@gmail.com